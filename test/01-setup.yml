---
  - name: Deploy Dimension Data infrastructure  
    hosts: localhost
    vars:
      root_password: P$$ssWwrrdGoDd!
    vars_files:
      - caas_credentials.yml
    tasks:
      - name: Check credentials (optionnal Step)
        caas_credentials:
          username: "{{caas_credentials.username}}"
          password: "{{caas_credentials.password}}"
          apiurl: "{{caas_credentials.apiurl}}"
          datacenter: "{{caas_credentials.datacenter}}" 
      - name: Deploy my Nework Domain
        caas_networkdomain:
          caas_credentials: "{{ caas_credentials }}"
          name: "{{ lookup ('env','caas_networkdomain') }}"
          type: ADVANCED
        register: caas_networkdomain
      - name: Deploy WebServers DMZ
        caas_vlan:
          caas_credentials: "{{ caas_credentials }}"
          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
          name: "{{caas_networkdomain.networkdomains.networkDomain[0].name}}_vlan_webservers"
          privateIpv4BaseAddress: "192.168.30.0"
        register: caas_vlan_webservers
#      - name: Deploy WebServers DMZ
#        caas_server:
#          caas_credentials: "{{ caas_credentials }}"
#          name: "MyWebServer"
#          imageName: CentOS 7 64-bit 2 CPU
#          administratorPassword: "{{ root_password }}"
#          networkInfo:
#              networkDomainName: ansible.Caas_SandBox
#              primaryNic: 
#                  privateIpv4: 192.168.30.42
#        register: caas_mywebserver
      - name: Deploy WebServers
        caas_server:
          caas_credentials: "{{ caas_credentials }}"
          wait: False
          name: "WebServer"
          #state: "absent"
          #action: shutdownServer
          count: 2
          #description: ansible.CaaS This a test, feel free to delete
          #imageId: bfe177f0-23ec-4886-a046-c516f354fd53
          imageName: CentOS 7 64-bit 2 CPU
          administratorPassword: "{{ root_password }}"
          #cpu:
              #count: 16
              #coresPerSocket: 1
              #speed: STANDARD
          networkInfo:
              #networkDomainId: fd340f41-7f93-4dda-a7f2-e46cc6302613
              networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
              primaryNic: 
                  #vlanId: 0cd34569-e3b4-46ca-9c86-3e8c2b08d732
                  vlanName: "{{caas_vlan_webservers.vlans.vlan[0].name}}"
                  #privateIpv4: 172.24.42.42
        register: caas_webservers
      - name: Deploy AppServers DMZ
        caas_vlan:
          caas_credentials: "{{ caas_credentials }}"
          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
          name: "{{caas_networkdomain.networkdomains.networkDomain[0].name}}_vlan_appservers"
          privateIpv4BaseAddress: "192.168.40.0"
        register: caas_vlan_appservers
      - name: Deploy AppServers
        caas_server:
          caas_credentials: "{{ caas_credentials }}"
          name: "AppServer"
          wait: False
          imageName: CentOS 7 64-bit 2 CPU
          administratorPassword: "{{ root_password }}"
          networkInfo:
              networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
              primaryNic: 
                  vlanName: "{{caas_vlan_appservers.vlans.vlan[0].name}}"
        register: caas_appservers
#      - name: Deploy DBServer DMZ
#        caas_vlan:
#          caas_credentials: "{{ caas_credentials }}"
#          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
#          name: "{{caas_networkdomain.networkdomains.networkDomain[0].name}}_vlan_dbservers"
#          privateIpv4BaseAddress: "192.168.50.0"
#        register: caas_vlan_dbservers
#      - name: Deploy DBServer
#        caas_server:
#          caas_credentials: "{{ caas_credentials }}"
#          name: "DBServer"
#          wait: True
#          imageName: CentOS 7 64-bit 2 CPU
#          administratorPassword: "{{ root_password }}"
#          networkInfo:
#              networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
#              primaryNic: 
#                  vlanName: "{{caas_vlan_dbservers.vlans.vlan[0].name}}"
#        register: caas_dbserver
      - name: Disable Default Rule that Drop Any external IPv6 connection
        caas_firewallrule:
          caas_credentials: "{{ caas_credentials }}"
          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
          name: "CCDEFAULT.DenyExternalInboundIPv6"
          enabled: False
      - name: Add FireWall Rule to allow IPv6 SSH (if any) for Ansible to webservers
        caas_firewallrule:
          when: ansible_all_ipv6_addresses[0] != ""
          caas_credentials: "{{ caas_credentials }}"
          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
          name: "ssh_for_ansible_to_vlan_webservers"
          action: "ACCEPT_DECISIVELY"
          ipVersion: "IPV6"
          protocol: "TCP"
          source:
            ip:
              address: "{{ ansible_all_ipv6_addresses[0] }}"
          destination:
            ip:
              address: "{{ caas_vlan_webservers.vlans.vlan[0].ipv6Range.address }}"
              prefixSize: "{{ caas_vlan_webservers.vlans.vlan[0].ipv6Range.prefixSize }}"
            port:
              begin: 22
          placement:
            position: "LAST"
      - name: Add FireWall Rule to allow IPv6 SSH (if any) for Ansible to appservers
        caas_firewallrule:
          when: ansible_all_ipv6_addresses[0] != ""
          caas_credentials: "{{ caas_credentials }}"
          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
          name: "ssh_for_ansible_to_vlan_appservers"
          action: "ACCEPT_DECISIVELY"
          ipVersion: "IPV6"
          protocol: "TCP"
          source:
            ip:
              address: "{{ ansible_all_ipv6_addresses[0] }}"
          destination:
            ip:
              address: "{{ caas_vlan_appservers.vlans.vlan[0].ipv6Range.address }}"
              prefixSize: "{{ caas_vlan_appservers.vlans.vlan[0].ipv6Range.prefixSize }}"
            port:
              begin: 22
          placement:
            position: "LAST"
      - name: Add FireWall Rule to allow Web 2 App
        caas_firewallrule:
          caas_credentials: "{{ caas_credentials }}"
          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
          name: "Web2App"
          source:
            ip:
              address: "{{ caas_vlan_webservers.vlans.vlan[0].privateIpv4Range.address }}"
              prefixSize: "{{ caas_vlan_webservers.vlans.vlan[0].privateIpv4Range.prefixSize }}"
          destination:
            ip:
              address: "{{ caas_vlan_appservers.vlans.vlan[0].privateIpv4Range.address }}"
              prefixSize: "{{ caas_vlan_appservers.vlans.vlan[0].privateIpv4Range.prefixSize }}"
            port:
              begin: 3000
          placement:
            position: "FIRST"
        register: caas_firewallrule
      - name: Wait for WebServers end of deployment
        caas_server:
          caas_credentials: "{{ caas_credentials }}"
          name: "WebServer"
          count: 2
          imageName: CentOS 7 64-bit 2 CPU
          administratorPassword: "{{ root_password }}"
          networkInfo:
              networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
              primaryNic: 
                  vlanName: "{{caas_vlan_webservers.vlans.vlan[0].name}}"
        register: caas_webservers
      #- name: Wait for SSH to come up
      #  wait_for: host="{{ item.networkInfo.primaryNic.ipv6 }}" port=22 timeout=9000 state=started
        #when: item.started
      #  with_items: caas_webservers.servers.server
      #- pause: seconds=30
      - name: Get Public IPv4
        caas_publicip:
          caas_credentials: "{{ caas_credentials }}"
          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
          #minFreePublicIpv4Address: 1
        register: caas_publicp
      - name: Setting Load Balancing for WebServers
        caas_loadbalancer:
          caas_credentials: "{{ caas_credentials }}"
          networkDomainName: "{{ caas_networkdomain.networkdomains.networkDomain[0].name }}"
          name: "WebServers.Load.Balancer"
#          type: STANDARD
#          protocol: TCP
#          port: 80
#          connectionLimit: 25000
#          connectionRateLimit: 2000
#          sourcePortPreservation: PRESERVE
#          optimizationProfile: TCP
          pool:
#              name: webservers.pool
#              loadBalanceMethod: ROUND_ROBIN
#              serviceDownAction: "RESELECT"
#              slowRampTime: 10
              node:
                - name: "webservers.node_{{item.name}}_{{item.networkInfo.primaryNic.privateIpv4}}"
                  description: "WebServer"
                  ipv4Address: "{{item.networkInfo.primaryNic.privateIpv4}}"
                  status: ENABLED
                  port: 80
                  connectionLimit: 20000
                  connectionRateLimit: 2000
        #when: item.started
        register: caas_loadbalancer
        with_items: "{{caas_webservers.servers.server}}"
      - name: Add new instances to group WebServers
        add_host: name="{{ item.id }}" ansible_ssh_host="{{ item.networkInfo.primaryNic.ipv6 }}" ansible_ssh_pass="{{ root_password }}" groupname=WebServers
        #when: item.started
        with_items: "{{caas_webservers.servers.server}}"
      - name: Add new instances to group AppServers
        add_host: name="{{ item.id }}" ansible_ssh_host="{{ item.networkInfo.primaryNic.ipv6 }}" ansible_ssh_pass="{{ root_password }}" groupname=AppServers
        #when: item.started
        with_items: "{{caas_appservers.servers.server}}"
#      - name: Wait for SSH to come up
#        wait_for: host="{{ item.networkInfo.primaryNic.ipv6 }}" port=22 timeout=600 state=started
        #when: item.started
#        with_items: caas_appservers.servers.server
#  - name: Configure Web Servers
#    hosts: WebServers
#    vars:
#      apache_listen_port: 80
#      apache_vhosts:
#        - {servername: "example.com", documentroot: "/var/www/vhosts/example_com"}
#      php_packages: ["php","php-cli","php-devel","php-pdo"]
#    roles:
#      - { role: geerlingguy.apache }
#      - { role: geerlingguy.php }
#  - name: Deploy Web Site
#    hosts: WebServers
#    tasks:
#      - yum: name=git
#      - git: repo=https://github.com/job-so/ansible.CaaS.demo.webserver.git dest=/var/www/vhosts/example_com
#  - name: Configure App Servers
#    hosts: AppServers
#    vars:
#      nodejs_forever: true
#      nodejs_npm_global_packages:
#        - name: express
#        - name: mongodb
#    roles:
#      - { role: geerlingguy.nodejs }
#  - name: Deploy and run Application
#    hosts: AppServers
#    tasks:
#      - yum: name=git
#      - git: repo=https://github.com/job-so/ansible.CaaS.demo.appserver.git dest=/root/app
#      - command: forever start /root/app/app.js
